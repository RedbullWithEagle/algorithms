package array

import (
	"fmt"
	"sort"
)

//ReverseArray 反转数组
func ReverseArray(source []int) []int {
	len := len(source)
	if len <= 1 {
		return source
	}
	right := 0
	left := len - 1

	for ; right < left; {
		tmp := source[left]
		source[left] = source[right]
		source[right] = tmp
		left--
		right++
	}

	return source
}

//BSearch 基本的二分查找
func BSearch(nums []int, target int) int {
	len := len(nums)
	left := 0
	right := len - 1

	//如果这里是<,查找不是在闭区间内，很多值差不到，第一个和最后一个元素取不到
	for ; left < right; {
		mid := left + (right-left)/2

		if nums[mid] == target {
			return mid
		} else if nums[mid] < target {
			left = mid + 1
		} else {
			right = mid - 1
		}
	}

	return -1
}

func testBinarySearch() {
	nums1 := []int{1, 5, 8, 12, 34, 45, 46, 78, 88}
	//nums2:= []int{2,2}
	//nums3:= []int{}

	fmt.Println(nums1)
	for i := 0; i < len(nums1); i++ {
		tmp := BSearch(nums1, nums1[i])
		fmt.Println(nums1[i], "  result is ", tmp)
	}
	/*result1 := bs.BSearch(nums1,23)
	result11 := bs.BSearch(nums1,78)
	result88 := bs.BSearch(nums1,88)
	result101 := bs.BSearch(nums1,1)
	fmt.Println(nums1)
	fmt.Println("23 result:",result1)
	fmt.Println("78 result:",result11)
	fmt.Println("88 result:",result88)
	fmt.Println("1 result:",result101)
	fmt.Println("----------------------------")

	result2 := bs.BSearch(nums2,8)
	result22 := bs.BSearch(nums2,2)
	fmt.Println("8 result:",result2)
	fmt.Println("2 result:",result22)
	fmt.Println("----------------------------")

	result3 := bs.BSearch(nums3,8)
	result33 := bs.BSearch(nums3,2)
	fmt.Println("8 result:",result3)
	fmt.Println("2 result:",result33)
	fmt.Println("----------------------------")*/
}

func threeSum(nums []int) [][]int {
	ret := make([][]int, 0, 1024)
	nLen := len(nums)
	if nLen <= 2 {
		return ret
	}

	for i := 0; i < nLen-1; i++ {
		twoSum := nums[i] + nums[i+1]
		if i+2 == nLen {
			return ret
		}
		for j := i + 2; j < nLen; j++ {
			if twoSum+nums[j] == 0 {
				tmp := []int{i, i + 1, j}
				ret = append(ret, tmp)
			}
		}
	}

	return ret
}

/*********************************************
*No.26 删除有序数组中的重复项
*给你一个有序数组 nums ，请你 原地 删除重复出现的元素，
*使每个元素 只出现一次 ，返回删除后数组的新长度。
*不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
*
********************************************/
func removeDuplicates(nums []int) []int {
	nLen := len(nums)
	if nLen <= 1 {
		return nums
	}
	sort.Ints(nums)
	for i := nLen - 1; i > 0; i-- {
		if nums[i] == nums[i-1] {
			nums = append(nums[:i-1], nums[i:]...)
		}
	}

	return nums
}

/*********************************************
*No.26 删除有序数组中的重复项
*采用双指针算法
********************************************/
func removeDuplicatesGF(nums []int) int {
	n := len(nums)
	if n == 0 {
		return 0
	}
	slow := 1
	for fast := 1; fast < n; fast++ {
		if nums[fast] != nums[fast-1] {
			nums[slow] = nums[fast]
			slow++
		}
	}
	return slow
}

func RangeMap(fields map[string]string) error{
	//如果fields是nil，for不会进入，直接运行后面的代码
	for k, v := range fields {
		fmt.Println(k,v)
	}
	return nil
}
func TestArray() {
	RangeMap(nil)

	/*fmt.Println(countAndSay(1))
	fmt.Println(countAndSay(2))
	fmt.Println(countAndSay(3))
	fmt.Println(countAndSay(4))
	fmt.Println(countAndSay(5))
	fmt.Println(countAndSay(6))
	fmt.Println(countAndSay(7))*/
	nums := []int{386987186,364389196,50977443,50977443,399358080,50977443,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,386281270,386281270,386281270,25298682,25298682,25298682,25298682,25298682,25298682,25298682,25298682,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,409259588,411104163,223542312,223542312,223542312,223542312,409259588,386281270,409259588,406869766,332315507,410071207,399309372,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,406869766,375799397,333034168,164687972,405973939,178781576,372718266,80992258,351287809,334266133,426676632,426676632,388437659,419133949,109356078,431761173,429719767,343820848,91087337,343820848,343820848,343820848,40457729,400459887,400459887,400459887,400459887,400459887,400459887,400459887,400459887,400459887,331430611,165357821,215053565,179283002,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,343820848,343820848,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,136808852,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,427562206,74698207,74698207,74698207,74698207,74698207,74698207,74698207,74698207,74698207,74698207,74698207,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,91087337,91087337,91087337,91087337,91087337,91087337,91087337,91087337,91087337,91087337,219597372,343820848,219597372,343820848,343820848,343820848,343820848,343820848,101622009,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,418614418,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,400459887,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,219597372,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,343820848,408691178,179283002,179283002,179283002,179283002,179283002,179283002,622623,15566876,401634512,74218395,68699874,58793079,430076371,47008193,410427738,373888764,409945075,409945075,24976615,255864714,176115115,207994408,364177627,408221855,11384143,11384143,272353393,65645336,72964355,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,148667842,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,154537171,179283002,179283002,180792789,188934706,188934706,188934706,188934706,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,222724781,340500514,364389196,364389196,364389196,364389196,364389196,364389196,400585646,400585646,400585646,401357286,401357286,401357286,403568223,403568223,403568223,403568223,403568223,403568223,403568223,403568223,403568223,403568223,417525908,417525908,417525908,417525908,417525908}

	fmt.Println(removeDuplicates(nums))
	/*l1 := makeListNode([]int{1,2,3,4,5})
	tmp := removeNthFromEnd(l1, 2)
	Traversal(tmp)
	l2 := makeListNode([]int{1, 3, 4})
	l3 := mergeTwoLists(l1, l2)
	Traversal(l3)*/
}

/*********************************************
*No.38 外观数列
*1.   1
*2.   11
*3.   21
*4.   12 11
********************************************/
func countAndSay(n int) string {
	if n < 1 || n > 30 {
		return ""
	}

	if n == 1 {
		return "1"
	}
	retStr := ""
	strBefore := countAndSay(n - 1)
	nLen := len(strBefore)
	if nLen == 0 {
		return ""
	}
	var cChar uint8
	nCount := 0
	for i := 0; i < nLen; i++ {
		if cChar == 0 {
			cChar = strBefore[i]
		}

		if cChar != strBefore[i] && cChar != 0 {
			tmp := fmt.Sprintf("%d%c", nCount, cChar)
			retStr += tmp
			cChar = strBefore[i]
			nCount = 0
		}

		nCount++

		if i == nLen-1 {
			tmp := fmt.Sprintf("%d%c", nCount, cChar)
			retStr += tmp
			return retStr
		}
	}

	return retStr
}
